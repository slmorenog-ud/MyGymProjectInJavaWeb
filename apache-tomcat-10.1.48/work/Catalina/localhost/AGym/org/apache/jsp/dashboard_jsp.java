/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.48
 * Generated at: 2025-10-24 08:03:38 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import com.agym.modelo.Usuario;

public final class dashboard_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("com.agym.modelo.Usuario");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');
      out.write('\n');

    Usuario usuario = (Usuario) session.getAttribute("usuario");
    if (usuario == null) {
        response.sendRedirect("login.html");
        return;
    }

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"es\">\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <title>Mi Panel - MyGymJW</title>\n");
      out.write("    <link rel=\"stylesheet\" href=\"css/styles.css\">\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("    <header>\n");
      out.write("        <h1><a href=\"index.html\">MyGymJW</a></h1>\n");
      out.write("        <nav>\n");
      out.write("            <a href=\"logout\">Cerrar Sesión</a>\n");
      out.write("        </nav>\n");
      out.write("    </header>\n");
      out.write("    <main>\n");
      out.write("        <div class=\"container\">\n");
      out.write("            <h2>Hola, ");
      out.print( usuario.getNombre() );
      out.write("!</h2>\n");
      out.write("            <p>Completa o actualiza tus datos para generar una rutina personalizada o revisa tu historial.</p>\n");
      out.write("\n");
      out.write("            <div class=\"actions-container\" style=\"text-align: center; margin-bottom: 25px;\">\n");
      out.write("                <a href=\"historial\" class=\"btn btn-secondary\">Mi Historial de Rutinas</a>\n");
      out.write("            </div>\n");
      out.write("\n");
      out.write("            <form action=\"generarRutina\" method=\"post\">\n");
      out.write("                <label for=\"altura\">Altura (cm):</label>\n");
      out.write("                <input type=\"number\" id=\"altura\" name=\"altura\" value=\"");
      out.print( usuario.getAltura() > 0 ? usuario.getAltura() : "" );
      out.write("\" required>\n");
      out.write("\n");
      out.write("                <label for=\"peso\">Peso (kg):</label>\n");
      out.write("                <input type=\"number\" step=\"0.1\" id=\"peso\" name=\"peso\" value=\"");
      out.print( usuario.getPeso() > 0 ? usuario.getPeso() : "" );
      out.write("\" required>\n");
      out.write("\n");
      out.write("                <label for=\"experiencia\">Nivel de Experiencia:</label>\n");
      out.write("                <select id=\"experiencia\" name=\"experiencia\" required>\n");
      out.write("                    <option value=\"principiante\" ");
      out.print( "principiante".equals(usuario.getExperiencia()) ? "selected" : "" );
      out.write(">Principiante</option>\n");
      out.write("                    <option value=\"intermedio\" ");
      out.print( "intermedio".equals(usuario.getExperiencia()) ? "selected" : "" );
      out.write(">Intermedio</option>\n");
      out.write("                    <option value=\"avanzado\" ");
      out.print( "avanzado".equals(usuario.getExperiencia()) ? "selected" : "" );
      out.write(">Avanzado</option>\n");
      out.write("                </select>\n");
      out.write("\n");
      out.write("                <label for=\"dias\">Días disponibles por semana:</label>\n");
      out.write("                <select id=\"dias\" name=\"dias\" required>\n");
      out.write("                    <option value=\"2\" ");
      out.print( usuario.getDiasDisponibles() == 2 ? "selected" : "" );
      out.write(">2 días</option>\n");
      out.write("                    <option value=\"3\" ");
      out.print( usuario.getDiasDisponibles() == 3 ? "selected" : "" );
      out.write(">3 días</option>\n");
      out.write("                    <option value=\"4\" ");
      out.print( usuario.getDiasDisponibles() == 4 ? "selected" : "" );
      out.write(">4 días</option>\n");
      out.write("                </select>\n");
      out.write("\n");
      out.write("                <label for=\"objetivo\">Objetivo Principal:</label>\n");
      out.write("                <select id=\"objetivo\" name=\"objetivo\" required>\n");
      out.write("                    <option value=\"bajar_peso\" ");
      out.print( "bajar_peso".equals(usuario.getObjetivo()) ? "selected" : "" );
      out.write(">Bajar de peso</option>\n");
      out.write("                    <option value=\"subir_peso\" ");
      out.print( "subir_peso".equals(usuario.getObjetivo()) ? "selected" : "" );
      out.write(">Subir de peso (Hipertrofia)</option>\n");
      out.write("                    <option value=\"fortalecer\" ");
      out.print( "fortalecer".equals(usuario.getObjetivo()) ? "selected" : "" );
      out.write(">Fortalecer (Fuerza)</option>\n");
      out.write("                </select>\n");
      out.write("\n");
      out.write("                <label for=\"prioridadMuscular\">¿Qué grupo muscular te gustaría priorizar? (Opcional)</label>\n");
      out.write("                <select id=\"prioridadMuscular\" name=\"prioridadMuscular\">\n");
      out.write("                    <option value=\"sin_preferencia\" ");
      out.print( "sin_preferencia".equals(usuario.getPrioridadMuscular()) ? "selected" : "" );
      out.write(">Sin preferencia</option>\n");
      out.write("                    <option value=\"tren_superior\" ");
      out.print( "tren_superior".equals(usuario.getPrioridadMuscular()) ? "selected" : "" );
      out.write(">Tren Superior</option>\n");
      out.write("                    <option value=\"tren_inferior\" ");
      out.print( "tren_inferior".equals(usuario.getPrioridadMuscular()) ? "selected" : "" );
      out.write(">Tren Inferior</option>\n");
      out.write("                    <option value=\"brazos\" ");
      out.print( "brazos".equals(usuario.getPrioridadMuscular()) ? "selected" : "" );
      out.write(">Brazos</option>\n");
      out.write("                </select>\n");
      out.write("\n");
      out.write("                <button type=\"submit\" class=\"btn\">Generar mi Rutina</button>\n");
      out.write("            </form>\n");
      out.write("        </div>\n");
      out.write("    </main>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
